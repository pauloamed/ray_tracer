#ifndef FILM_H
#define FILM_H

#include "rt3.h"
#include "error.h"
#include "paramset.h"

namespace rt3 {

    /// Represents an image generated by the ray tracer.
    class Film {
        struct ColorBuffer{
            
            vector<vector<ColorInt>> data;
            int height, width;


            ColorBuffer(int _height, int _width): height(_height), width(_width){
                data = vector<vector<ColorInt>>(height, vector<ColorInt>(width));
            }

            ColorInt& at(Point2i coord){
                return data[coord[0]][coord[1]];
            }

            unsigned char* getBlob(){
                unsigned char * byte_data = new unsigned char[width * height * 3];
                int currPos = 0;
                for(auto &row : data){
                    for(auto &c : row){
                        for(int i = 0; i < 3; ++i){
                            byte_data[currPos++] = c[i];
                        }
                    }
                }
                return byte_data;
            }
        };

        public:

            //=== Film Public Methods
            Film( const Point2i &resolution, const std::string &filename, image_type_t imgt );
            virtual ~Film();
            
            /// Retrieve original Film resolution.
            Point2i get_resolution() const { return m_full_resolution; };
            /// Takes a sample `p` and its radiance `L` and updates the image.
            void add_sample( const Point2i &, const Color & );
            void write_image() const;

            //=== Film Public Data
            const Point2i m_full_resolution;    //!< The image's full resolution values.
            std::string m_filename;       //!< Full path file name + extension.
            image_type_t image_type; //!< Image type, PNG, PPM3, PPM6.
            

            // Create the matrix (or vector) that will hold the image data.
            std::unique_ptr< ColorBuffer > m_color_buffer_ptr; //!< Reference to the color buffer (image) object.
            
            int height() const { return m_full_resolution.at(0); }
            int width() const { return m_full_resolution.at(1); } 
            real_type get_aspect() const { return ((real_type) width()) /  height(); }
            

    };

    // Factory pattern. It's not part of this class.
    Film * create_film( const ParamSet &ps );
};  // namespace rt3

#endif  // FILM_H
